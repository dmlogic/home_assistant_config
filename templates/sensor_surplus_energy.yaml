- binary_sensor:
    # Here we want to establish if energy being exported to the grid is sufficient
    # to power the immersion water heater. If it is, we turn on the Shelly immersion
    # heater switch. However, when that switch is already on, we need to account for
    # it's power usage in our maths (this is )
    - name: "Surplus power"
      state: >

        {# This is the amount of power exporting #}
        {% set export_power = max([states('sensor.solaredge_m1_ac_power') | float(0), 0]) %}

        {# This is the expected amount that the water heater will use #}
        {% set heater_power = 3222 %}

        {# If we're not exporting at all, it's an immediate no #}
        {% if export_power <= 0 %}
        off
        {% else %}

          {# If the heater is on, add it's max usage to the export #}
          {% if states("switch.shelly_immersion") == "on" %}
              {% set switch_power = states('sensor.immersion_plus1m_switch_0_power') | float(0) %}
              {% set export_power = export_power + switch_power %}
          {% endif %}

          {# If we're in credit, turn it on #}
          {%if export_power > heater_power %}
          on
          {% else %}
          off
          {% endif %}
        {% endif %}
